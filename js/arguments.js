!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("Orbs",[],e):"object"==typeof exports?exports.Orbs=e():t.Orbs=e()}(global,function(){return function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=30)}([function(t,e,r){global,t.exports=function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}t.exports=function(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}},function(t,e,r){"use strict";r.r(e);var i,n,s,a,u=r(1),o=r.n(u),h=r(2),y=r.n(h),f=r(0),l=r.n(f),c=Object.freeze({TypeMessage:1,TypeBytes:2,TypeString:3,TypeUnion:4,TypeUint8:11,TypeUint16:12,TypeUint32:13,TypeUint64:14,TypeUint8Array:21,TypeUint16Array:22,TypeUint32Array:23,TypeUint64Array:24,TypeMessageArray:31,TypeBytesArray:32,TypeStringArray:33,TypeBytes32:41,TypeBytes20:42,TypeBytes32Array:51,TypeBytes20Array:52}),p=Object.freeze((i={},l()(i,c.TypeMessage,4),l()(i,c.TypeBytes,4),l()(i,c.TypeString,4),l()(i,c.TypeUnion,2),l()(i,c.TypeUint8,1),l()(i,c.TypeUint16,2),l()(i,c.TypeUint32,4),l()(i,c.TypeUint64,8),l()(i,c.TypeUint8Array,4),l()(i,c.TypeUint16Array,4),l()(i,c.TypeUint32Array,4),l()(i,c.TypeUint64Array,4),l()(i,c.TypeMessageArray,4),l()(i,c.TypeBytesArray,4),l()(i,c.TypeStringArray,4),l()(i,c.TypeBytes32,32),l()(i,c.TypeBytes20,20),l()(i,c.TypeBytes32Array,4),l()(i,c.TypeBytes20Array,4),i)),g=Object.freeze((n={},l()(n,c.TypeMessage,4),l()(n,c.TypeBytes,4),l()(n,c.TypeString,4),l()(n,c.TypeUnion,2),l()(n,c.TypeUint8,1),l()(n,c.TypeUint16,2),l()(n,c.TypeUint32,4),l()(n,c.TypeUint64,4),l()(n,c.TypeUint8Array,4),l()(n,c.TypeUint16Array,4),l()(n,c.TypeUint32Array,4),l()(n,c.TypeUint64Array,4),l()(n,c.TypeMessageArray,4),l()(n,c.TypeBytesArray,4),l()(n,c.TypeStringArray,4),l()(n,c.TypeBytes32,4),l()(n,c.TypeBytes20,4),l()(n,c.TypeBytes32Array,4),l()(n,c.TypeBytes20Array,4),n)),d=Object.freeze((s={},l()(s,c.TypeMessage,!0),l()(s,c.TypeBytes,!0),l()(s,c.TypeString,!0),l()(s,c.TypeUnion,!0),l()(s,c.TypeUint8,!1),l()(s,c.TypeUint16,!1),l()(s,c.TypeUint32,!1),l()(s,c.TypeUint64,!1),l()(s,c.TypeUint8Array,!0),l()(s,c.TypeUint16Array,!0),l()(s,c.TypeUint32Array,!0),l()(s,c.TypeUint64Array,!0),l()(s,c.TypeMessageArray,!0),l()(s,c.TypeBytesArray,!0),l()(s,c.TypeStringArray,!0),l()(s,c.TypeBytes32,!1),l()(s,c.TypeBytes20,!1),l()(s,c.TypeBytes32Array,!0),l()(s,c.TypeBytes20Array,!0),s)),v=Object.freeze((a={},l()(a,c.TypeMessage,4),l()(a,c.TypeBytes,1),l()(a,c.TypeString,1),l()(a,c.TypeUnion,0),l()(a,c.TypeUint8,0),l()(a,c.TypeUint16,0),l()(a,c.TypeUint32,0),l()(a,c.TypeUint64,0),l()(a,c.TypeUint8Array,1),l()(a,c.TypeUint16Array,2),l()(a,c.TypeUint32Array,4),l()(a,c.TypeUint64Array,4),l()(a,c.TypeMessageArray,4),l()(a,c.TypeBytesArray,4),l()(a,c.TypeStringArray,4),l()(a,c.TypeBytes32,0),l()(a,c.TypeBytes20,0),l()(a,c.TypeBytes32Array,4),l()(a,c.TypeBytes20Array,4),a)),T=String.fromCharCode,b={}.toString,U=Math.log,w=Math.LN2,z=Math.clz32||function(t){return 31-U(t>>>0)/w|0};function A(t){var e=0|t.charCodeAt(0);if(e>=55296&&e<=56319){var r=0|t.charCodeAt(1);if(r!=r)return T(239,191,189);if(!(r>=56320&&r<=57343))return T(239,191,189);if((e=(e-55296<<10)+r-56320+65536|0)>65535)return T(240|e>>>18,128|e>>>12&63,128|e>>>6&63,128|63&e)}return e<=127?t:e<=2047?T(192|e>>>6,128|63&e):T(224|e>>>12,128|e>>>6&63,128|63&e)}var k=function(){function t(){o()(this,t)}return y()(t,[{key:"encode",value:function(t){for(var e=void 0===t?"":(""+t).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g,A),r=0|e.length,i=new Uint8Array(r),n=0;n<r;n=n+1|0)i[n]=0|e.charCodeAt(n);return i}}]),t}();function O(t){var e=t.charCodeAt(0)<<24,r=0|z(~e),i=0,n=0|t.length,s="";if(r<5&&n>=r){for(e=e<<r>>>24+r,i=1;i<r;i=i+1|0)e=e<<6|63&t.charCodeAt(i);e<=65535?s+=T(e):e<=1114111?s+=T(55296+((e=e-65536|0)>>10)|0,56320+(1023&e)|0):i=0}for(;i<n;i=i+1|0)s+="ï¿½";return s}var B=function(){function t(e){o()(this,t)}return y()(t,[{key:"decode",value:function(t){for(var e=t.buffer,r=(b.call(e),t),i="",n=0,s=0|r.length;n<s;n=n+32768|0)i+=T.apply(0,r.subarray(n,n+32768|0));return i.replace(/[\xc0-\xff][\x80-\xbf]*/g,O)}}]),t}(),m=null;function x(){return null===m&&(m=new k),m}var S=null;function I(){return null===S&&(S=new B("utf-8")),S}var _=function(){function t(e,r,i,n){o()(this,t),this.cursor=e,this.endCursor=r,this.fieldType=i,this.m=n}return y()(t,[{key:"hasNext",value:function(){return this.cursor<this.endCursor}},{key:"nextUint8",value:function(){if(this.cursor+p[c.TypeUint8]>this.endCursor)return this.cursor=this.endCursor,0;var t=this.m.getUint8InOffset(this.cursor);return this.cursor+=p[c.TypeUint8],this.cursor=F(this.cursor,c.TypeUint8Array),t}},{key:"nextUint16",value:function(){if(this.cursor+p[c.TypeUint16]>this.endCursor)return this.cursor=this.endCursor,0;var t=this.m.getUint16InOffset(this.cursor);return this.cursor+=p[c.TypeUint16],this.cursor=F(this.cursor,c.TypeUint16Array),t}},{key:"nextUint32",value:function(){if(this.cursor+p[c.TypeUint32]>this.endCursor)return this.cursor=this.endCursor,0;var t=this.m.getUint32InOffset(this.cursor);return this.cursor+=p[c.TypeUint32],this.cursor=F(this.cursor,c.TypeUint32Array),t}},{key:"nextUint64",value:function(){if(this.cursor+p[c.TypeUint64]>this.endCursor)return this.cursor=this.endCursor,BigInt(0);var t=this.m.getUint64InOffset(this.cursor);return this.cursor+=p[c.TypeUint64],this.cursor=F(this.cursor,c.TypeUint64Array),t}},{key:"nextMessage",value:function(){if(this.cursor+p[c.TypeMessage]>this.endCursor)return this.cursor=this.endCursor,[new Uint8Array,0];var t=this.m.getOffsetInOffset(this.cursor);if(this.cursor+=p[c.TypeMessage],this.cursor=F(this.cursor,c.TypeMessage),this.cursor+t>this.endCursor)return this.cursor=this.endCursor,[new Uint8Array,0];var e=this.m.bytes.subarray(this.cursor,this.cursor+t);return this.cursor+=t,this.cursor=F(this.cursor,c.TypeMessageArray),[e,t]}},{key:"nextBytes",value:function(){if(this.cursor+p[c.TypeBytes]>this.endCursor)return this.cursor=this.endCursor,new Uint8Array;var t=this.m.getOffsetInOffset(this.cursor);if(this.cursor+=p[c.TypeBytes],this.cursor=F(this.cursor,c.TypeBytes),this.cursor+t>this.endCursor)return this.cursor=this.endCursor,new Uint8Array;var e=this.m.bytes.subarray(this.cursor,this.cursor+t);return this.cursor+=t,this.cursor=F(this.cursor,c.TypeBytesArray),e}},{key:"nextBytes20",value:function(){if(this.cursor+p[c.TypeBytes20]>this.endCursor)return this.cursor=this.endCursor,new Uint8Array;var t=this.m.bytes.subarray(this.cursor,this.cursor+p[c.TypeBytes20]);return this.cursor+=p[c.TypeBytes20],t}},{key:"nextBytes32",value:function(){if(this.cursor+p[c.TypeBytes32]>this.endCursor)return this.cursor=this.endCursor,new Uint8Array;var t=this.m.bytes.subarray(this.cursor,this.cursor+p[c.TypeBytes32]);return this.cursor+=p[c.TypeBytes32],t}},{key:"nextString",value:function(){var t=this.nextBytes();return I().decode(t)}},{key:Symbol.iterator,value:function(){var t=this;return{next:function(){if(!t.hasNext())return{done:!0,value:void 0};switch(t.fieldType){case c.TypeUint8:return{value:t.nextUint8(),done:!1};case c.TypeUint16:return{value:t.nextUint16(),done:!1};case c.TypeUint32:return{value:t.nextUint32(),done:!1};case c.TypeUint64:return{value:t.nextUint64(),done:!1};case c.TypeMessage:return{value:t.nextMessage(),done:!1};case c.TypeBytes:return{value:t.nextBytes(),done:!1};case c.TypeBytes20:return{value:t.nextBytes20(),done:!1};case c.TypeBytes32:return{value:t.nextBytes32(),done:!1};case c.TypeString:return{value:t.nextString(),done:!1};default:throw new Error("unsupported array type")}}}}}]),t}();function C(t,e){var r=g[e];return Math.floor((t+r-1)/r)*r}function F(t,e){var r=v[e];return Math.floor((t+r-1)/r)*r}var j=function(){function t(e,r,i,n){o()(this,t),this.size=r,this.scheme=i,this.unions=n,l()(this,"bytes",void 0),l()(this,"dataView",void 0),l()(this,"offsets",void 0),this.bytes=e,this.dataView=new DataView(e.buffer,e.byteOffset),this.offsets=null}return y()(t,[{key:"lazyCalcOffsets",value:function(){if(null!==this.offsets)return!0;for(var t={},e=0,r=0,i=0;i<this.scheme.length;i++){var n=this.scheme[i];if(e===this.size)break;if((e=C(e,n))>this.size)return!1;if(t[i]=e,n===c.TypeUnion){if(e+p[c.TypeUnion]>this.size)return!1;var s=this.dataView.getUint16(e,!0);if(e+=p[c.TypeUnion],r>=this.unions.length||s>=this.unions[r].length)return!1;n=this.unions[r][s],r+=1,e=C(e,n)}if(d[n]){if(e+p[n]>this.size)return!1;var a=this.dataView.getUint32(e,!0);e=F(e+=p[n],n),e+=a}else e+=p[n]}return!(e>this.size||0===e||(this.offsets=t,0))}},{key:"isValid",value:function(){if(void 0===this.bytes)throw"uninitialized membuffer, did you create it directly without a Builder or a Reader?";return this.lazyCalcOffsets()}},{key:"rawBuffer",value:function(){return this.bytes.subarray(0,this.size)}},{key:"rawBufferForField",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length||t>=this.scheme.length)return new Uint8Array;var r=this.scheme[t],i=this.offsets[t];if(r===c.TypeUnion){var n=this.dataView.getUint16(i,!0);if(i+=p[c.TypeUnion],e>=this.unions.length||n>=this.unions[e].length)return new Uint8Array;i=C(i,r=this.unions[e][n])}if(d[r]){var s=this.dataView.getUint32(i,!0);return i=F(i+=p[r],r),this.bytes.subarray(i,i+s)}return this.bytes.subarray(i,i+p[r])}},{key:"rawBufferWithHeaderForField",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length||t>=this.scheme.length)return new Uint8Array;var r=this.scheme[t],i=this.offsets[t],n=i;if(r===c.TypeUnion){var s=this.dataView.getUint16(i,!0);if(i+=p[c.TypeUnion],e>=this.unions.length||s>=this.unions[e].length)return new Uint8Array;i=C(i,r=this.unions[e][s])}if(d[r]){var a=this.dataView.getUint32(i,!0);return i=F(i+=p[r],r),this.bytes.subarray(n,i+a)}return this.bytes.subarray(n,i+p[r])}},{key:"getOffsetInOffset",value:function(t){return this.dataView.getUint32(t,!0)}},{key:"getUint8InOffset",value:function(t){return this.dataView.getUint8(t)}},{key:"setUint8InOffset",value:function(t,e){return this.dataView.setUint8(t,e)}},{key:"getUint8",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return 0;var e=this.offsets[t];return this.getUint8InOffset(e)}},{key:"setUint8",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[t];return this.setUint8InOffset(r,e)}},{key:"getUint16InOffset",value:function(t){return this.dataView.getUint16(t,!0)}},{key:"setUint16InOffset",value:function(t,e){return this.dataView.setUint16(t,e,!0)}},{key:"getUint16",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return 0;var e=this.offsets[t];return this.getUint16InOffset(e)}},{key:"setUint16",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[t];return this.setUint16InOffset(r,e)}},{key:"getUint32InOffset",value:function(t){return this.dataView.getUint32(t,!0)}},{key:"setUint32InOffset",value:function(t,e){return this.dataView.setUint32(t,e,!0)}},{key:"getUint32",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return 0;var e=this.offsets[t];return this.getUint32InOffset(e)}},{key:"setUint32",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[t];return this.setUint32InOffset(r,e)}},{key:"getUint64InOffset",value:function(t){return this.dataView.getBigUint64(t,!0)}},{key:"setUint64InOffset",value:function(t,e){return this.dataView.setBigUint64(t,e,!0)}},{key:"getUint64",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return BigInt(0);var e=this.offsets[t];return this.getUint64InOffset(e)}},{key:"setUint64",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[t];return this.setUint64InOffset(r,e)}},{key:"getMessageInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeMessage],c.TypeMessage),this.bytes.subarray(t,t+e)}},{key:"getMessage",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new Uint8Array;var e=this.offsets[t];return this.getMessageInOffset(e)}},{key:"getBytesInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return(t=F(t+=p[c.TypeBytes],c.TypeBytes))+e>this.bytes.byteLength?new Uint8Array:this.bytes.subarray(t,t+e)}},{key:"setBytesInOffset",value:function(t,e){if(this.dataView.getUint32(t,!0)!==e.byteLength)throw new Error("size mismatch");return t=F(t+=p[c.TypeBytes],c.TypeBytes),this.bytes.set(e,t)}},{key:"getBytes",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new Uint8Array;var e=this.offsets[t];return this.getBytesInOffset(e)}},{key:"setBytes",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");var r=this.offsets[t];return this.setBytesInOffset(r,e)}},{key:"getBytes20",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new Uint8Array;var e=this.offsets[t];return this.bytes.subarray(e,e+20)}},{key:"setBytes20",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");if(20!==e.byteLength)throw new Error("size mismatch");var r=this.offsets[t];return this.bytes.set(e,r)}},{key:"getBytes32",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new Uint8Array;var e=this.offsets[t];return this.bytes.subarray(e,e+32)}},{key:"setBytes32",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)throw new Error("invalid field");if(32!==e.byteLength)throw new Error("size mismatch");var r=this.offsets[t];return this.bytes.set(e,r)}},{key:"getStringInOffset",value:function(t){var e=this.getBytesInOffset(t);return I().decode(e)}},{key:"setStringInOffset",value:function(t,e){return this.setBytesInOffset(t,x().encode(e))}},{key:"getString",value:function(t){var e=this.getBytes(t);return I().decode(e)}},{key:"setString",value:function(t,e){return this.setBytes(t,x().encode(e))}},{key:"getUnionIndex",value:function(t,e){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return 65535;var r=this.offsets[t],i=this.dataView.getUint16(r,!0);return r+=p[c.TypeUnion],e>=this.unions.length||i>=this.unions[e].length?65535:(r=C(r,this.unions[e][i]),i)}},{key:"isUnionIndex",value:function(t,e,r){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return[!1,0];var i=this.offsets[t],n=this.dataView.getUint16(i,!0);return i+=p[c.TypeUnion],e>=this.unions.length||n>=this.unions[e].length?[!1,0]:[n===r,i=C(i,this.unions[e][n])]}},{key:"getUint8ArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeUint8Array],c.TypeUint8Array),new _(t,t+e,c.TypeUint8,this)}},{key:"getUint8ArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeUint8,this);var e=this.offsets[t];return this.getUint8ArrayIteratorInOffset(e)}},{key:"getUint16ArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeUint32Array],c.TypeUint16Array),new _(t,t+e,c.TypeUint16,this)}},{key:"getUint16ArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeUint16,this);var e=this.offsets[t];return this.getUint16ArrayIteratorInOffset(e)}},{key:"getUint32ArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeUint32Array],c.TypeUint32Array),new _(t,t+e,c.TypeUint32,this)}},{key:"getUint32ArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeUint32,this);var e=this.offsets[t];return this.getUint32ArrayIteratorInOffset(e)}},{key:"getUint64ArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeUint64Array],c.TypeUint64Array),new _(t,t+e,c.TypeUint64,this)}},{key:"getUint64ArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeUint64,this);var e=this.offsets[t];return this.getUint64ArrayIteratorInOffset(e)}},{key:"getMessageArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeMessageArray],c.TypeMessageArray),new _(t,t+e,c.TypeMessage,this)}},{key:"getMessageArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeMessage,this);var e=this.offsets[t];return this.getMessageArrayIteratorInOffset(e)}},{key:"getBytesArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeMessageArray],c.TypeBytesArray),new _(t,t+e,c.TypeBytes,this)}},{key:"getBytesArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeBytes,this);var e=this.offsets[t];return this.getBytesArrayIteratorInOffset(e)}},{key:"getBytes20ArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeBytes20,this);var e=this.offsets[t],r=this.dataView.getUint32(e,!0);return e+=p[c.TypeBytes20Array],new _(e,e+r,c.TypeBytes20,this)}},{key:"getBytes32ArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeBytes32,this);var e=this.offsets[t],r=this.dataView.getUint32(e,!0);return e+=p[c.TypeBytes32Array],new _(e,e+r,c.TypeBytes32,this)}},{key:"getStringArrayIteratorInOffset",value:function(t){var e=this.dataView.getUint32(t,!0);return t=F(t+=p[c.TypeStringArray],c.TypeStringArray),new _(t,t+e,c.TypeString,this)}},{key:"getStringArrayIterator",value:function(t){if(!this.lazyCalcOffsets()||t>=Object.keys(this.offsets).length)return new _(0,0,c.TypeString,this);var e=this.offsets[t];return this.getStringArrayIteratorInOffset(e)}}]),t}(),M=function(){function t(){o()(this,t),l()(this,"size",void 0),this.size=0}return y()(t,[{key:"reset",value:function(){this.size=0}},{key:"getSize",value:function(){return this.size}},{key:"writeUint8",value:function(t,e){this.size=C(this.size,c.TypeUint8),t&&new DataView(t.buffer,t.byteOffset).setUint8(this.size,e),this.size+=p[c.TypeUint8]}},{key:"writeUint16",value:function(t,e){this.size=C(this.size,c.TypeUint16),t&&new DataView(t.buffer,t.byteOffset).setUint16(this.size,e,!0),this.size+=p[c.TypeUint16]}},{key:"writeUint32",value:function(t,e){this.size=C(this.size,c.TypeUint32),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,e,!0),this.size+=p[c.TypeUint32]}},{key:"writeUint64",value:function(t,e){this.size=C(this.size,c.TypeUint64),t&&new DataView(t.buffer,t.byteOffset).setBigUint64(this.size,e,!0),this.size+=p[c.TypeUint64]}},{key:"writeBytes",value:function(t,e){var r=t?new DataView(t.buffer,t.byteOffset):void 0;this.size=C(this.size,c.TypeBytes),t&&(e?r.setUint32(this.size,e.byteLength,!0):r.setUint32(this.size,0,!0)),this.size+=p[c.TypeBytes],this.size=F(this.size,c.TypeBytes),e&&(t&&t.set(e,this.size),this.size+=e.byteLength)}},{key:"writeBytes20",value:function(t,e){if(!e||20!==e.byteLength)throw new Error("size mismatch");this.size=C(this.size,c.TypeBytes20),e&&(t&&t.set(e,this.size),this.size+=e.byteLength)}},{key:"writeBytes32",value:function(t,e){if(!e||32!==e.byteLength)throw new Error("size mismatch");this.size=C(this.size,c.TypeBytes32),e&&(t&&t.set(e,this.size),this.size+=e.byteLength)}},{key:"writeString",value:function(t,e){this.writeBytes(t,x().encode(e))}},{key:"writeUnionIndex",value:function(t,e){this.size=C(this.size,c.TypeUnion),t&&new DataView(t.buffer,t.byteOffset).setUint16(this.size,e,!0),this.size+=p[c.TypeUnion]}},{key:"writeUint8Array",value:function(t,e){this.size=C(this.size,c.TypeUint8Array),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,e.length*p[c.TypeUint8],!0),this.size+=p[c.TypeUint8Array],this.size=F(this.size,c.TypeUint8Array);var r=!0,i=!1,n=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.writeUint8(t,u)}}catch(t){i=!0,n=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw n}}}},{key:"writeUint16Array",value:function(t,e){this.size=C(this.size,c.TypeUint16Array),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,e.length*p[c.TypeUint16],!0),this.size+=p[c.TypeUint16Array],this.size=F(this.size,c.TypeUint16Array);var r=!0,i=!1,n=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.writeUint16(t,u)}}catch(t){i=!0,n=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw n}}}},{key:"writeUint32Array",value:function(t,e){this.size=C(this.size,c.TypeUint32Array),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,e.length*p[c.TypeUint32],!0),this.size+=p[c.TypeUint32Array],this.size=F(this.size,c.TypeUint32Array);var r=!0,i=!1,n=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.writeUint32(t,u)}}catch(t){i=!0,n=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw n}}}},{key:"writeUint64Array",value:function(t,e){this.size=C(this.size,c.TypeUint64Array),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,e.length*p[c.TypeUint64],!0),this.size+=p[c.TypeUint64Array],this.size=F(this.size,c.TypeUint64Array);var r=!0,i=!1,n=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.writeUint64(t,u)}}catch(t){i=!0,n=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw n}}}},{key:"writeBytesArray",value:function(t,e){this.size=C(this.size,c.TypeBytesArray);var r=this.size;this.size+=p[c.TypeBytesArray],this.size=F(this.size,c.TypeBytesArray);var i=this.size,n=!0,s=!1,a=void 0;try{for(var u,o=e[Symbol.iterator]();!(n=(u=o.next()).done);n=!0){var h=u.value;this.writeBytes(t,h)}}catch(t){s=!0,a=t}finally{try{n||null==o.return||o.return()}finally{if(s)throw a}}var y=this.size-i;t&&new DataView(t.buffer,t.byteOffset).setUint32(r,y,!0)}},{key:"writeBytes20Array",value:function(t,e){this.size=C(this.size,c.TypeBytes20Array),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,20*e.length,!0),this.size+=p[c.TypeBytes20Array];var r=!0,i=!1,n=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.writeBytes20(t,u)}}catch(t){i=!0,n=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw n}}}},{key:"writeBytes32Array",value:function(t,e){this.size=C(this.size,c.TypeBytes32Array),t&&new DataView(t.buffer,t.byteOffset).setUint32(this.size,32*e.length,!0),this.size+=p[c.TypeBytes32Array];var r=!0,i=!1,n=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done);r=!0){var u=s.value;this.writeBytes32(t,u)}}catch(t){i=!0,n=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw n}}}},{key:"writeStringArray",value:function(t,e){this.size=C(this.size,c.TypeStringArray);var r=this.size;this.size+=p[c.TypeStringArray],this.size=F(this.size,c.TypeStringArray);var i=this.size,n=!0,s=!1,a=void 0;try{for(var u,o=e[Symbol.iterator]();!(n=(u=o.next()).done);n=!0){var h=u.value;this.writeString(t,h)}}catch(t){s=!0,a=t}finally{try{n||null==o.return||o.return()}finally{if(s)throw a}}var y=this.size-i;t&&new DataView(t.buffer,t.byteOffset).setUint32(r,y,!0)}},{key:"writeMessage",value:function(t,e){this.size=C(this.size,c.TypeMessage);var r=this.size;this.size+=p[c.TypeMessage],this.size=F(this.size,c.TypeMessage),t?e.write(t.subarray(this.size)):e.write(null);var i=e.getSize();this.size+=i,t&&new DataView(t.buffer,t.byteOffset).setUint32(r,i,!0)}},{key:"writeMessageArray",value:function(t,e){this.size=C(this.size,c.TypeMessageArray);var r=this.size;this.size+=p[c.TypeMessageArray],this.size=F(this.size,c.TypeMessageArray);var i=this.size,n=!0,s=!1,a=void 0;try{for(var u,o=e[Symbol.iterator]();!(n=(u=o.next()).done);n=!0){var h=u.value;this.writeMessage(t,h)}}catch(t){s=!0,a=t}finally{try{n||null==o.return||o.return()}finally{if(s)throw a}}var y=this.size-i;t&&new DataView(t.buffer,t.byteOffset).setUint32(r,y,!0)}}]),t}();r.d(e,"InternalBuilder",function(){return M}),r.d(e,"InternalMessage",function(){return j}),r.d(e,"getTextDecoder",function(){return I}),r.d(e,"getTextEncoder",function(){return x}),r.d(e,"FieldTypes",function(){return c})}])},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}t.exports=function(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),t}},function(t,e,r){"use strict";var i=r(8),n=r(18);function s(t,e){return 55296==(64512&t.charCodeAt(e))&&(!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1)))}function a(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function u(t){return 1===t.length?"0"+t:t}function o(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}e.inherits=n,e.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),n=0;n<t.length;n+=2)r.push(parseInt(t[n]+t[n+1],16))}else for(var i=0,n=0;n<t.length;n++){var a=t.charCodeAt(n);a<128?r[i++]=a:a<2048?(r[i++]=a>>6|192,r[i++]=63&a|128):s(t,n)?(a=65536+((1023&a)<<10)+(1023&t.charCodeAt(++n)),r[i++]=a>>18|240,r[i++]=a>>12&63|128,r[i++]=a>>6&63|128,r[i++]=63&a|128):(r[i++]=a>>12|224,r[i++]=a>>6&63|128,r[i++]=63&a|128)}else for(n=0;n<t.length;n++)r[n]=0|t[n];return r},e.toHex=function(t){for(var e="",r=0;r<t.length;r++)e+=u(t[r].toString(16));return e},e.htonl=a,e.toHex32=function(t,e){for(var r="",i=0;i<t.length;i++){var n=t[i];"little"===e&&(n=a(n)),r+=o(n.toString(16))}return r},e.zero2=u,e.zero8=o,e.join32=function(t,e,r,n){var s=r-e;i(s%4==0);for(var a=new Array(s/4),u=0,o=e;u<a.length;u++,o+=4){var h;h="big"===n?t[o]<<24|t[o+1]<<16|t[o+2]<<8|t[o+3]:t[o+3]<<24|t[o+2]<<16|t[o+1]<<8|t[o],a[u]=h>>>0}return a},e.split32=function(t,e){for(var r=new Array(4*t.length),i=0,n=0;i<t.length;i++,n+=4){var s=t[i];"big"===e?(r[n]=s>>>24,r[n+1]=s>>>16&255,r[n+2]=s>>>8&255,r[n+3]=255&s):(r[n+3]=s>>>24,r[n+2]=s>>>16&255,r[n+1]=s>>>8&255,r[n]=255&s)}return r},e.rotr32=function(t,e){return t>>>e|t<<32-e},e.rotl32=function(t,e){return t<<e|t>>>32-e},e.sum32=function(t,e){return t+e>>>0},e.sum32_3=function(t,e,r){return t+e+r>>>0},e.sum32_4=function(t,e,r,i){return t+e+r+i>>>0},e.sum32_5=function(t,e,r,i,n){return t+e+r+i+n>>>0},e.sum64=function(t,e,r,i){var n=t[e],s=i+t[e+1]>>>0,a=(s<i?1:0)+r+n;t[e]=a>>>0,t[e+1]=s},e.sum64_hi=function(t,e,r,i){return(e+i>>>0<e?1:0)+t+r>>>0},e.sum64_lo=function(t,e,r,i){return e+i>>>0},e.sum64_4_hi=function(t,e,r,i,n,s,a,u){var o=0,h=e;return o+=(h=h+i>>>0)<e?1:0,o+=(h=h+s>>>0)<s?1:0,t+r+n+a+(o+=(h=h+u>>>0)<u?1:0)>>>0},e.sum64_4_lo=function(t,e,r,i,n,s,a,u){return e+i+s+u>>>0},e.sum64_5_hi=function(t,e,r,i,n,s,a,u,o,h){var y=0,f=e;return y+=(f=f+i>>>0)<e?1:0,y+=(f=f+s>>>0)<s?1:0,y+=(f=f+u>>>0)<u?1:0,t+r+n+a+o+(y+=(f=f+h>>>0)<h?1:0)>>>0},e.sum64_5_lo=function(t,e,r,i,n,s,a,u,o,h){return e+i+s+u+h>>>0},e.rotr64_hi=function(t,e,r){return(e<<32-r|t>>>r)>>>0},e.rotr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0},e.shr64_hi=function(t,e,r){return t>>>r},e.shr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0}},function(t,e,r){var i=r(27),n=r(28);t.exports=function(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?n(t):e}},function(t,e){function r(e){return t.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},r(e)}t.exports=r},function(t,e,r){var i=r(29);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}},function(t,e,r){var i=r(15),n=r(16),s=r(17);t.exports=function(t,e){return i(t)||n(t,e)||s()}},function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}t.exports=r,r.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)}},function(t,e,r){"use strict";var i=r(3),n=r(8);function s(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}e.BlockHash=s,s.prototype.update=function(t,e){if(t=i.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var r=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-r,t.length),0===this.pending.length&&(this.pending=null),t=i.join32(t,0,t.length-r,this.endian);for(var n=0;n<t.length;n+=this._delta32)this._update(t,n,n+this._delta32)}return this},s.prototype.digest=function(t){return this.update(this._pad()),n(null===this.pending),this._digest(t)},s.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,r=e-(t+this.padLength)%e,i=new Array(r+this.padLength);i[0]=128;for(var n=1;n<r;n++)i[n]=0;if(t<<=3,"big"===this.endian){for(var s=8;s<this.padLength;s++)i[n++]=0;i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=t>>>24&255,i[n++]=t>>>16&255,i[n++]=t>>>8&255,i[n++]=255&t}else for(i[n++]=255&t,i[n++]=t>>>8&255,i[n++]=t>>>16&255,i[n++]=t>>>24&255,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,s=8;s<this.padLength;s++)i[n++]=0;return i}},function(t,e,r){"use strict";var i=r(3).rotr32;function n(t,e,r){return t&e^~t&r}function s(t,e,r){return t&e^t&r^e&r}function a(t,e,r){return t^e^r}e.ft_1=function(t,e,r,i){return 0===t?n(e,r,i):1===t||3===t?a(e,r,i):2===t?s(e,r,i):void 0},e.ch32=n,e.maj32=s,e.p32=a,e.s0_256=function(t){return i(t,2)^i(t,13)^i(t,22)},e.s1_256=function(t){return i(t,6)^i(t,11)^i(t,25)},e.g0_256=function(t){return i(t,7)^i(t,18)^t>>>3},e.g1_256=function(t){return i(t,17)^i(t,19)^t>>>10}},function(t,e,r){"use strict";var i=r(3),n=r(9),s=r(10),a=r(8),u=i.sum32,o=i.sum32_4,h=i.sum32_5,y=s.ch32,f=s.maj32,l=s.s0_256,c=s.s1_256,p=s.g0_256,g=s.g1_256,d=n.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function T(){if(!(this instanceof T))return new T;d.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}i.inherits(T,d),t.exports=T,T.blockSize=512,T.outSize=256,T.hmacStrength=192,T.padLength=64,T.prototype._update=function(t,e){for(var r=this.W,i=0;i<16;i++)r[i]=t[e+i];for(;i<r.length;i++)r[i]=o(g(r[i-2]),r[i-7],p(r[i-15]),r[i-16]);var n=this.h[0],s=this.h[1],d=this.h[2],v=this.h[3],T=this.h[4],b=this.h[5],U=this.h[6],w=this.h[7];for(a(this.k.length===r.length),i=0;i<r.length;i++){var z=h(w,c(T),y(T,b,U),this.k[i],r[i]),A=u(l(n),f(n,s,d));w=U,U=b,b=T,T=u(v,z),v=d,d=s,s=n,n=u(z,A)}this.h[0]=u(this.h[0],n),this.h[1]=u(this.h[1],s),this.h[2]=u(this.h[2],d),this.h[3]=u(this.h[3],v),this.h[4]=u(this.h[4],T),this.h[5]=u(this.h[5],b),this.h[6]=u(this.h[6],U),this.h[7]=u(this.h[7],w)},T.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(t,e,r){"use strict";var i=r(3),n=r(9),s=r(8),a=i.rotr64_hi,u=i.rotr64_lo,o=i.shr64_hi,h=i.shr64_lo,y=i.sum64,f=i.sum64_hi,l=i.sum64_lo,c=i.sum64_4_hi,p=i.sum64_4_lo,g=i.sum64_5_hi,d=i.sum64_5_lo,v=n.BlockHash,T=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function b(){if(!(this instanceof b))return new b;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=T,this.W=new Array(160)}function U(t,e,r,i,n){var s=t&r^~t&n;return s<0&&(s+=4294967296),s}function w(t,e,r,i,n,s){var a=e&i^~e&s;return a<0&&(a+=4294967296),a}function z(t,e,r,i,n){var s=t&r^t&n^r&n;return s<0&&(s+=4294967296),s}function A(t,e,r,i,n,s){var a=e&i^e&s^i&s;return a<0&&(a+=4294967296),a}function k(t,e){var r=a(t,e,28)^a(e,t,2)^a(e,t,7);return r<0&&(r+=4294967296),r}function O(t,e){var r=u(t,e,28)^u(e,t,2)^u(e,t,7);return r<0&&(r+=4294967296),r}function B(t,e){var r=a(t,e,14)^a(t,e,18)^a(e,t,9);return r<0&&(r+=4294967296),r}function m(t,e){var r=u(t,e,14)^u(t,e,18)^u(e,t,9);return r<0&&(r+=4294967296),r}function x(t,e){var r=a(t,e,1)^a(t,e,8)^o(t,e,7);return r<0&&(r+=4294967296),r}function S(t,e){var r=u(t,e,1)^u(t,e,8)^h(t,e,7);return r<0&&(r+=4294967296),r}function I(t,e){var r=a(t,e,19)^a(e,t,29)^o(t,e,6);return r<0&&(r+=4294967296),r}function _(t,e){var r=u(t,e,19)^u(e,t,29)^h(t,e,6);return r<0&&(r+=4294967296),r}i.inherits(b,v),t.exports=b,b.blockSize=1024,b.outSize=512,b.hmacStrength=192,b.padLength=128,b.prototype._prepareBlock=function(t,e){for(var r=this.W,i=0;i<32;i++)r[i]=t[e+i];for(;i<r.length;i+=2){var n=I(r[i-4],r[i-3]),s=_(r[i-4],r[i-3]),a=r[i-14],u=r[i-13],o=x(r[i-30],r[i-29]),h=S(r[i-30],r[i-29]),y=r[i-32],f=r[i-31];r[i]=c(n,s,a,u,o,h,y,f),r[i+1]=p(n,s,a,u,o,h,y,f)}},b.prototype._update=function(t,e){this._prepareBlock(t,e);var r=this.W,i=this.h[0],n=this.h[1],a=this.h[2],u=this.h[3],o=this.h[4],h=this.h[5],c=this.h[6],p=this.h[7],v=this.h[8],T=this.h[9],b=this.h[10],x=this.h[11],S=this.h[12],I=this.h[13],_=this.h[14],C=this.h[15];s(this.k.length===r.length);for(var F=0;F<r.length;F+=2){var j=_,M=C,V=B(v,T),L=m(v,T),E=U(v,T,b,x,S),D=w(v,T,b,x,S,I),H=this.k[F],P=this.k[F+1],W=r[F],N=r[F+1],q=g(j,M,V,L,E,D,H,P,W,N),R=d(j,M,V,L,E,D,H,P,W,N);j=k(i,n),M=O(i,n),V=z(i,n,a,u,o),L=A(i,n,a,u,o,h);var G=f(j,M,V,L),J=l(j,M,V,L);_=S,C=I,S=b,I=x,b=v,x=T,v=f(c,p,q,R),T=l(p,p,q,R),c=o,p=h,o=a,h=u,a=i,u=n,i=f(q,R,G,J),n=l(q,R,G,J)}y(this.h,0,i,n),y(this.h,2,a,u),y(this.h,4,o,h),y(this.h,6,c,p),y(this.h,8,v,T),y(this.h,10,b,x),y(this.h,12,S,I),y(this.h,14,_,C)},b.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(t,e,r){var i=e;i.utils=r(3),i.common=r(9),i.sha=r(21),i.ripemd=r(25),i.hmac=r(26),i.sha1=i.sha.sha1,i.sha256=i.sha.sha256,i.sha224=i.sha.sha224,i.sha384=i.sha.sha384,i.sha512=i.sha.sha512,i.ripemd160=i.ripemd.ripemd160},function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){var r=[],i=!0,n=!1,s=void 0;try{for(var a,u=t[Symbol.iterator]();!(i=(a=u.next()).done)&&(r.push(a.value),!e||r.length!==e);i=!0);}catch(t){n=!0,s=t}finally{try{i||null==u.return||u.return()}finally{if(n)throw s}}return r}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(t,e,r){try{var i=r(19);if("function"!=typeof i.inherits)throw"";t.exports=i.inherits}catch(e){t.exports=r(20)}},function(t,e){t.exports=require("util")},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},function(t,e,r){"use strict";e.sha1=r(22),e.sha224=r(23),e.sha256=r(11),e.sha384=r(24),e.sha512=r(12)},function(t,e,r){"use strict";var i=r(3),n=r(9),s=r(10),a=i.rotl32,u=i.sum32,o=i.sum32_5,h=s.ft_1,y=n.BlockHash,f=[1518500249,1859775393,2400959708,3395469782];function l(){if(!(this instanceof l))return new l;y.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}i.inherits(l,y),t.exports=l,l.blockSize=512,l.outSize=160,l.hmacStrength=80,l.padLength=64,l.prototype._update=function(t,e){for(var r=this.W,i=0;i<16;i++)r[i]=t[e+i];for(;i<r.length;i++)r[i]=a(r[i-3]^r[i-8]^r[i-14]^r[i-16],1);var n=this.h[0],s=this.h[1],y=this.h[2],l=this.h[3],c=this.h[4];for(i=0;i<r.length;i++){var p=~~(i/20),g=o(a(n,5),h(p,s,y,l),c,r[i],f[p]);c=l,l=y,y=a(s,30),s=n,n=g}this.h[0]=u(this.h[0],n),this.h[1]=u(this.h[1],s),this.h[2]=u(this.h[2],y),this.h[3]=u(this.h[3],l),this.h[4]=u(this.h[4],c)},l.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h,"big"):i.split32(this.h,"big")}},function(t,e,r){"use strict";var i=r(3),n=r(11);function s(){if(!(this instanceof s))return new s;n.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}i.inherits(s,n),t.exports=s,s.blockSize=512,s.outSize=224,s.hmacStrength=192,s.padLength=64,s.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h.slice(0,7),"big"):i.split32(this.h.slice(0,7),"big")}},function(t,e,r){"use strict";var i=r(3),n=r(12);function s(){if(!(this instanceof s))return new s;n.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}i.inherits(s,n),t.exports=s,s.blockSize=1024,s.outSize=384,s.hmacStrength=192,s.padLength=128,s.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h.slice(0,12),"big"):i.split32(this.h.slice(0,12),"big")}},function(t,e,r){"use strict";var i=r(3),n=r(9),s=i.rotl32,a=i.sum32,u=i.sum32_3,o=i.sum32_4,h=n.BlockHash;function y(){if(!(this instanceof y))return new y;h.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function f(t,e,r,i){return t<=15?e^r^i:t<=31?e&r|~e&i:t<=47?(e|~r)^i:t<=63?e&i|r&~i:e^(r|~i)}function l(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function c(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}i.inherits(y,h),e.ripemd160=y,y.blockSize=512,y.outSize=160,y.hmacStrength=192,y.padLength=64,y.prototype._update=function(t,e){for(var r=this.h[0],i=this.h[1],n=this.h[2],h=this.h[3],y=this.h[4],T=r,b=i,U=n,w=h,z=y,A=0;A<80;A++){var k=a(s(o(r,f(A,i,n,h),t[p[A]+e],l(A)),d[A]),y);r=y,y=h,h=s(n,10),n=i,i=k,k=a(s(o(T,f(79-A,b,U,w),t[g[A]+e],c(A)),v[A]),z),T=z,z=w,w=s(U,10),U=b,b=k}k=u(this.h[1],n,w),this.h[1]=u(this.h[2],h,z),this.h[2]=u(this.h[3],y,T),this.h[3]=u(this.h[4],r,b),this.h[4]=u(this.h[0],i,U),this.h[0]=k},y.prototype._digest=function(t){return"hex"===t?i.toHex32(this.h,"little"):i.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],g=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],d=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(t,e,r){"use strict";var i=r(3),n=r(8);function s(t,e,r){if(!(this instanceof s))return new s(t,e,r);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(i.toArray(e,r))}t.exports=s,s.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),n(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},s.prototype.update=function(t,e){return this.inner.update(t,e),this},s.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(e){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?t.exports=i=function(t){return r(t)}:t.exports=i=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":r(t)},i(e)}t.exports=i},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e){function r(e,i){return t.exports=r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},r(e,i)}t.exports=r},function(t,e,r){"use strict";r.r(e);var i=r(7),n=r.n(i),s=r(13),a=r.n(s),u=32;var o=r(0);function h(t){for(var e=function(t){for(var e=new Uint8Array(2*t.byteLength),r=0;r<t.byteLength;r++){var i="00"+t[r].toString(16).toLowerCase();e[2*r]=i.charCodeAt(i.length-2),e[2*r+1]=i.charCodeAt(i.length-1)}return e}(t),r=function(t){var e=[].slice.call(t),r=a.a.sha256().update(e).digest();return new Uint8Array(r)}(t),i=0;i<2*t.byteLength;i++){var n=r[Math.floor(i/2)%u];i%2==0?n>>=4:n&=15,e[i]>57&&n>7&&(e[i]-=32)}return"0x"+Object(o.getTextDecoder)().decode(e)}function y(t){t.startsWith("0x")&&(t=t.slice(2));var e=function(t){if(t.length%2!=0)throw new Error("invalid hex string '".concat(t,"'"));for(var e=new Uint8Array(t.length/2),r=0;r<t.length;r+=2){var i=parseInt(t.substr(r,2),16);if(isNaN(i))throw new Error("invalid hex string '".concat(t,"'"));e[r/2]=i}return e}(t);if(h(e).slice(2)!=t){if(t.toUpperCase()==t||t.toLowerCase()==t)return e;throw new Error("invalid checksum on hex string '".concat(t,"'"))}return e}var f=r(1),l=r.n(f),c=r(2),p=r.n(c),g=r(4),d=r.n(g),v=r(5),T=r.n(v),b=r(6),U=r.n(b),w=r(14),z=r.n(w),A=function(){function t(){l()(this,t),z()(this,"builder",void 0),this.builder=new o.InternalBuilder}return p()(t,[{key:"getSize",value:function(){return this.builder.getSize()}},{key:"calcRequiredSize",value:function(){return this.write(null),this.builder.getSize()}},{key:"build",value:function(){var t=new Uint8Array(this.calcRequiredSize());return this.write(t),t}}]),t}();var k=[o.FieldTypes.TypeUnion],O=[[o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint64,o.FieldTypes.TypeString,o.FieldTypes.TypeBytes]],B=function(t){function e(t){var r;return l()(this,e),(r=d()(this,T()(e).call(this))).fields=t,r}return U()(e,t),p()(e,[{key:"write",value:function(t){switch(this.builder.reset(),this.builder.writeUnionIndex(t,this.fields.type),this.fields.type){case 0:this.builder.writeUint32(t,this.fields.value);break;case 1:this.builder.writeUint64(t,this.fields.value);break;case 2:this.builder.writeString(t,this.fields.value);break;case 3:this.builder.writeBytes(t,this.fields.value);break;default:throw new Error("unknown Argument type ".concat(this.fields.type))}}}]),e}(A),m=[o.FieldTypes.TypeMessageArray],x=function(t){function e(t){var r;return l()(this,e),(r=d()(this,T()(e).call(this))).fields=t,r}return U()(e,t),p()(e,[{key:"write",value:function(t){this.builder.reset(),this.builder.writeMessageArray(t,this.fields.arguments)}}]),e}(A);o.FieldTypes.TypeString,o.FieldTypes.TypeString,o.FieldTypes.TypeBytes,o.FieldTypes.TypeMessageArray,o.FieldTypes.TypeUnion,o.FieldTypes.TypeMessage,o.FieldTypes.TypeMessage,o.FieldTypes.TypeUint16,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint64,o.FieldTypes.TypeMessage,o.FieldTypes.TypeString,o.FieldTypes.TypeString,o.FieldTypes.TypeBytes,o.FieldTypes.TypeMessage,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint16,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeMessage,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint16,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint64,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint64,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint64,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint64,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeBytes,o.FieldTypes.TypeUint32,o.FieldTypes.TypeUint32;r.d(e,"argUint32",function(){return S}),r.d(e,"argUint64",function(){return I}),r.d(e,"argString",function(){return _}),r.d(e,"argBytes",function(){return C}),r.d(e,"argAddress",function(){return F}),r.d(e,"packedArgumentsEncode",function(){return M}),r.d(e,"packedArgumentsDecode",function(){return V});var S=function(t){return{type:"uint32",value:t}},I=function(t){return{type:"uint64",value:"number"==typeof t?BigInt(t):t}},_=function(t){return{type:"string",value:t}},C=function(t){return{type:"bytes",value:t}},F=function(t){return C(function(t){return y(t)}(t))};function j(t){var e=function(t){for(var e=[],r=0;r<t.length;r++){var i=t[r];switch(i.type){case"uint32":e.push(new B({type:0,value:i.value}));break;case"uint64":e.push(new B({type:1,value:i.value}));break;case"string":e.push(new B({type:2,value:i.value}));break;case"bytes":e.push(new B({type:3,value:i.value}));break;default:throw new Error("Argument unknown type: ".concat(i))}}return e}(t),r=new x({arguments:e}).build();return new o.InternalMessage(r,r.byteLength,m,[])}function M(t){return j(t).rawBufferForField(0,0)}function V(t){for(var e=[],r=new o.InternalMessage(t,t.byteLength,m,[]).getMessageArrayIterator(0),i=0;r.hasNext();){var s=r.nextMessage(),a=n()(s,2),u=a[0],h=a[1],y=new o.InternalMessage(u,h,k,O),f=y.getUnionIndex(0,0);switch(f){case 0:var l=y.isUnionIndex(0,0,0),c=n()(l,2)[1];e.push(S(y.getUint32InOffset(c)));break;case 1:var p=y.isUnionIndex(0,0,1),g=n()(p,2)[1];e.push(I(y.getUint64InOffset(g)));break;case 2:var d=y.isUnionIndex(0,0,2),v=n()(d,2)[1];e.push(_(y.getStringInOffset(v)));break;case 3:var T=y.isUnionIndex(0,0,3),b=n()(T,2)[1];e.push(C(y.getBytesInOffset(b)));break;default:throw new Error("received argument ".concat(i," has unknown type: ").concat(f))}i++}return e}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,